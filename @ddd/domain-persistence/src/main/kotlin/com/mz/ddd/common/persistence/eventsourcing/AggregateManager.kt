package com.mz.ddd.common.persistence.eventsourcing

import com.mz.ddd.common.api.domain.Document
import com.mz.ddd.common.api.domain.DomainCommand
import com.mz.ddd.common.api.domain.DomainEvent
import com.mz.ddd.common.api.domain.Id
import reactor.core.publisher.Mono

/**
 * Domain facade contract for operations related with state management of Aggregate root.
 * @param A - Aggregate
 * @param C - Domain command type -> mutation of the aggregate
 * @param S - State type, represents state/snapshot/document of aggregate
 */
interface AggregateManager<A, C : DomainCommand, E : DomainEvent, S : Document<E>> {

    /**
     * This function applies changes to the Aggregate root.
     *
     * @param command The command for mutating the Domain entity.
     * @param id The ID of the Domain entity.
     * @param exclusivePreExecute An optional pre-execution step to be performed exclusively before the command execution.
     * @return A Mono emitting the state of the aggregate after the command execution.
     */
    fun execute(command: C, id: Id, exclusivePreExecute: (() -> Mono<Boolean>)? = null): Mono<S>

    /**
     * This function applies changes to the Aggregate root and returns the events.
     *
     * @param command The command for mutating the Domain entity.
     * @param id The ID of the Domain entity.
     * @param exclusivePreExecute An optional pre-execution step to be performed exclusively before the command execution.
     * @return A Mono emitting the list of domain events generated by the command.
     */
    fun executeAndReturnEvents(command: C, id: Id, exclusivePreExecute: (() -> Mono<Boolean>)? = null): Mono<List<E>>

    /**
     * This function finds an Aggregate root by its ID.
     *
     * @param id The ID of the Domain entity.
     * @return A Mono emitting the found aggregate.
     */
    fun findById(id: Id): Mono<S>
}