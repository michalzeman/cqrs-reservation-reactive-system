package com.mz.ddd.common.persistence.eventsourcing.aggregate

import com.mz.ddd.common.api.domain.Aggregate
import com.mz.ddd.common.api.domain.DomainCommand
import com.mz.ddd.common.api.domain.DomainEvent
import com.mz.ddd.common.api.domain.Id
import reactor.core.publisher.Mono

/**
 * Data class representing the effect of a command on an aggregate.
 * It contains the updated aggregate and the list of domain events generated by the command.
 *
 * @param aggregate The updated aggregate after the command execution.
 * @param events The list of domain events generated by the command.
 */
data class CommandEffect<A : Aggregate, E : DomainEvent>(val aggregate: A, val events: List<E> = listOf())

/**
 * Interface for the repository of aggregates.
 * It provides methods to execute commands on aggregates and to find aggregates by their ID.
 *
 * @param A The type of the aggregate.
 * @param C The type of the command.
 * @param E The type of the domain event.
 */
interface AggregateRepository<A : Aggregate, C : DomainCommand, E : DomainEvent> {

    /**
     * Executes a command on an aggregate.
     * Optionally, a pre-execution step can be performed exclusively before the command execution.
     *
     * @param id The ID of the aggregate.
     * @param command The command to be executed.
     * @param exclusivePreExecute An optional pre-execution step to be performed exclusively before the command execution.
     * @return A Mono emitting the effect of the command on the aggregate.
     */
    fun execute(id: Id, command: C, exclusivePreExecute: (() -> Mono<Boolean>)? = null): Mono<CommandEffect<A, E>>

    /**
     * Finds an aggregate by its ID.
     *
     * @param id The ID of the aggregate.
     * @return A Mono emitting the found aggregate.
     */
    fun find(id: Id): Mono<A>

}